// source: rpc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.lnrpc.Peer');
goog.provide('proto.lnrpc.Peer.SyncType');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');
goog.require('proto.lnrpc.Feature');
goog.require('proto.lnrpc.TimestampedError');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lnrpc.Peer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lnrpc.Peer.repeatedFields_, null);
};
goog.inherits(proto.lnrpc.Peer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lnrpc.Peer.displayName = 'proto.lnrpc.Peer';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lnrpc.Peer.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lnrpc.Peer.prototype.toObject = function(opt_includeInstance) {
  return proto.lnrpc.Peer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lnrpc.Peer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.Peer.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 3, ""),
    bytesSent: jspb.Message.getFieldWithDefault(msg, 4, 0),
    bytesRecv: jspb.Message.getFieldWithDefault(msg, 5, 0),
    satSent: jspb.Message.getFieldWithDefault(msg, 6, 0),
    satRecv: jspb.Message.getFieldWithDefault(msg, 7, 0),
    inbound: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    pingTime: jspb.Message.getFieldWithDefault(msg, 9, 0),
    syncType: jspb.Message.getFieldWithDefault(msg, 10, 0),
    featuresMap: (f = msg.getFeaturesMap()) ? f.toObject(includeInstance, proto.lnrpc.Feature.toObject) : [],
    errorsList: jspb.Message.toObjectList(msg.getErrorsList(),
    proto.lnrpc.TimestampedError.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lnrpc.Peer}
 */
proto.lnrpc.Peer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lnrpc.Peer;
  return proto.lnrpc.Peer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lnrpc.Peer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lnrpc.Peer}
 */
proto.lnrpc.Peer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPubKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBytesSent(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBytesRecv(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSatSent(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSatRecv(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInbound(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPingTime(value);
      break;
    case 10:
      var value = /** @type {!proto.lnrpc.Peer.SyncType} */ (reader.readEnum());
      msg.setSyncType(value);
      break;
    case 11:
      var value = msg.getFeaturesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.lnrpc.Feature.deserializeBinaryFromReader, 0, new proto.lnrpc.Feature());
         });
      break;
    case 12:
      var value = new proto.lnrpc.TimestampedError;
      reader.readMessage(value,proto.lnrpc.TimestampedError.deserializeBinaryFromReader);
      msg.addErrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lnrpc.Peer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lnrpc.Peer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lnrpc.Peer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.Peer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPubKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBytesSent();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getBytesRecv();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getSatSent();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getSatRecv();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getInbound();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getPingTime();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getSyncType();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getFeaturesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.lnrpc.Feature.serializeBinaryToWriter);
  }
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.lnrpc.TimestampedError.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.lnrpc.Peer.SyncType = {
  UNKNOWN_SYNC: 0,
  ACTIVE_SYNC: 1,
  PASSIVE_SYNC: 2
};

/**
 * optional string pub_key = 1;
 * @return {string}
 */
proto.lnrpc.Peer.prototype.getPubKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lnrpc.Peer} returns this
 */
proto.lnrpc.Peer.prototype.setPubKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 3;
 * @return {string}
 */
proto.lnrpc.Peer.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.lnrpc.Peer} returns this
 */
proto.lnrpc.Peer.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 bytes_sent = 4;
 * @return {number}
 */
proto.lnrpc.Peer.prototype.getBytesSent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.lnrpc.Peer} returns this
 */
proto.lnrpc.Peer.prototype.setBytesSent = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 bytes_recv = 5;
 * @return {number}
 */
proto.lnrpc.Peer.prototype.getBytesRecv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.lnrpc.Peer} returns this
 */
proto.lnrpc.Peer.prototype.setBytesRecv = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 sat_sent = 6;
 * @return {number}
 */
proto.lnrpc.Peer.prototype.getSatSent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.lnrpc.Peer} returns this
 */
proto.lnrpc.Peer.prototype.setSatSent = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 sat_recv = 7;
 * @return {number}
 */
proto.lnrpc.Peer.prototype.getSatRecv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.lnrpc.Peer} returns this
 */
proto.lnrpc.Peer.prototype.setSatRecv = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool inbound = 8;
 * @return {boolean}
 */
proto.lnrpc.Peer.prototype.getInbound = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lnrpc.Peer} returns this
 */
proto.lnrpc.Peer.prototype.setInbound = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional int64 ping_time = 9;
 * @return {number}
 */
proto.lnrpc.Peer.prototype.getPingTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.lnrpc.Peer} returns this
 */
proto.lnrpc.Peer.prototype.setPingTime = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional SyncType sync_type = 10;
 * @return {!proto.lnrpc.Peer.SyncType}
 */
proto.lnrpc.Peer.prototype.getSyncType = function() {
  return /** @type {!proto.lnrpc.Peer.SyncType} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.lnrpc.Peer.SyncType} value
 * @return {!proto.lnrpc.Peer} returns this
 */
proto.lnrpc.Peer.prototype.setSyncType = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * map<uint32, Feature> features = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.lnrpc.Feature>}
 */
proto.lnrpc.Peer.prototype.getFeaturesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.lnrpc.Feature>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      proto.lnrpc.Feature));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.lnrpc.Peer} returns this
 */
proto.lnrpc.Peer.prototype.clearFeaturesMap = function() {
  this.getFeaturesMap().clear();
  return this;};


/**
 * repeated TimestampedError errors = 12;
 * @return {!Array<!proto.lnrpc.TimestampedError>}
 */
proto.lnrpc.Peer.prototype.getErrorsList = function() {
  return /** @type{!Array<!proto.lnrpc.TimestampedError>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lnrpc.TimestampedError, 12));
};


/**
 * @param {!Array<!proto.lnrpc.TimestampedError>} value
 * @return {!proto.lnrpc.Peer} returns this
*/
proto.lnrpc.Peer.prototype.setErrorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.lnrpc.TimestampedError=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lnrpc.TimestampedError}
 */
proto.lnrpc.Peer.prototype.addErrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.lnrpc.TimestampedError, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lnrpc.Peer} returns this
 */
proto.lnrpc.Peer.prototype.clearErrorsList = function() {
  return this.setErrorsList([]);
};


