// source: src/lib/protos/lnrpc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.lnrpc.Channel', null, global);
goog.exportSymbol('proto.lnrpc.FundingShim', null, global);
goog.exportSymbol('proto.lnrpc.Htlc', null, global);
goog.exportSymbol('proto.lnrpc.listChannelsRequest', null, global);
goog.exportSymbol('proto.lnrpc.listChannelsResponse', null, global);
goog.exportSymbol('proto.lnrpc.openChannelRequest', null, global);
goog.exportSymbol('proto.lnrpc.openChannelResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lnrpc.listChannelsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lnrpc.listChannelsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lnrpc.listChannelsRequest.displayName = 'proto.lnrpc.listChannelsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lnrpc.listChannelsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lnrpc.listChannelsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lnrpc.listChannelsResponse.displayName = 'proto.lnrpc.listChannelsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lnrpc.openChannelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lnrpc.openChannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lnrpc.openChannelRequest.displayName = 'proto.lnrpc.openChannelRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lnrpc.openChannelResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lnrpc.openChannelResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lnrpc.openChannelResponse.displayName = 'proto.lnrpc.openChannelResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lnrpc.FundingShim = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lnrpc.FundingShim, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lnrpc.FundingShim.displayName = 'proto.lnrpc.FundingShim';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lnrpc.Channel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lnrpc.Channel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lnrpc.Channel.displayName = 'proto.lnrpc.Channel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lnrpc.Htlc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lnrpc.Htlc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lnrpc.Htlc.displayName = 'proto.lnrpc.Htlc';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lnrpc.listChannelsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lnrpc.listChannelsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lnrpc.listChannelsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.listChannelsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    activeOnly: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    inactiveOnly: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    publicOnly: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    privateOnly: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    peer: msg.getPeer_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lnrpc.listChannelsRequest}
 */
proto.lnrpc.listChannelsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lnrpc.listChannelsRequest;
  return proto.lnrpc.listChannelsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lnrpc.listChannelsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lnrpc.listChannelsRequest}
 */
proto.lnrpc.listChannelsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActiveOnly(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInactiveOnly(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPublicOnly(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPrivateOnly(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lnrpc.listChannelsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lnrpc.listChannelsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lnrpc.listChannelsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.listChannelsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActiveOnly();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getInactiveOnly();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getPublicOnly();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getPrivateOnly();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getPeer_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional bool active_only = 1;
 * @return {boolean}
 */
proto.lnrpc.listChannelsRequest.prototype.getActiveOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lnrpc.listChannelsRequest} returns this
 */
proto.lnrpc.listChannelsRequest.prototype.setActiveOnly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool inactive_only = 2;
 * @return {boolean}
 */
proto.lnrpc.listChannelsRequest.prototype.getInactiveOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lnrpc.listChannelsRequest} returns this
 */
proto.lnrpc.listChannelsRequest.prototype.setInactiveOnly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool public_only = 3;
 * @return {boolean}
 */
proto.lnrpc.listChannelsRequest.prototype.getPublicOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lnrpc.listChannelsRequest} returns this
 */
proto.lnrpc.listChannelsRequest.prototype.setPublicOnly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool private_only = 4;
 * @return {boolean}
 */
proto.lnrpc.listChannelsRequest.prototype.getPrivateOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lnrpc.listChannelsRequest} returns this
 */
proto.lnrpc.listChannelsRequest.prototype.setPrivateOnly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bytes peer = 5;
 * @return {!(string|Uint8Array)}
 */
proto.lnrpc.listChannelsRequest.prototype.getPeer = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes peer = 5;
 * This is a type-conversion wrapper around `getPeer()`
 * @return {string}
 */
proto.lnrpc.listChannelsRequest.prototype.getPeer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPeer()));
};


/**
 * optional bytes peer = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPeer()`
 * @return {!Uint8Array}
 */
proto.lnrpc.listChannelsRequest.prototype.getPeer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPeer()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lnrpc.listChannelsRequest} returns this
 */
proto.lnrpc.listChannelsRequest.prototype.setPeer = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lnrpc.listChannelsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.lnrpc.listChannelsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lnrpc.listChannelsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.listChannelsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    channel: (f = msg.getChannel()) && proto.lnrpc.Channel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lnrpc.listChannelsResponse}
 */
proto.lnrpc.listChannelsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lnrpc.listChannelsResponse;
  return proto.lnrpc.listChannelsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lnrpc.listChannelsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lnrpc.listChannelsResponse}
 */
proto.lnrpc.listChannelsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lnrpc.Channel;
      reader.readMessage(value,proto.lnrpc.Channel.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lnrpc.listChannelsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lnrpc.listChannelsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lnrpc.listChannelsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.listChannelsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lnrpc.Channel.serializeBinaryToWriter
    );
  }
};


/**
 * optional Channel channel = 1;
 * @return {?proto.lnrpc.Channel}
 */
proto.lnrpc.listChannelsResponse.prototype.getChannel = function() {
  return /** @type{?proto.lnrpc.Channel} */ (
    jspb.Message.getWrapperField(this, proto.lnrpc.Channel, 1));
};


/**
 * @param {?proto.lnrpc.Channel|undefined} value
 * @return {!proto.lnrpc.listChannelsResponse} returns this
*/
proto.lnrpc.listChannelsResponse.prototype.setChannel = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lnrpc.listChannelsResponse} returns this
 */
proto.lnrpc.listChannelsResponse.prototype.clearChannel = function() {
  return this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lnrpc.listChannelsResponse.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lnrpc.openChannelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lnrpc.openChannelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lnrpc.openChannelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.openChannelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodePubkey: msg.getNodePubkey_asB64(),
    nodePubkeyString: jspb.Message.getFieldWithDefault(msg, 2, ""),
    localFundingAmount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pushSat: jspb.Message.getFieldWithDefault(msg, 4, 0),
    targetConf: jspb.Message.getFieldWithDefault(msg, 5, 0),
    satPerByte: jspb.Message.getFieldWithDefault(msg, 6, 0),
    pb_private: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    minHtlcMsat: jspb.Message.getFieldWithDefault(msg, 8, 0),
    remoteCsvDelay: jspb.Message.getFieldWithDefault(msg, 9, 0),
    minConf: jspb.Message.getFieldWithDefault(msg, 10, 0),
    spendUnconfirmed: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    closeAddress: jspb.Message.getFieldWithDefault(msg, 12, ""),
    fundingShim: (f = msg.getFundingShim()) && proto.lnrpc.FundingShim.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lnrpc.openChannelRequest}
 */
proto.lnrpc.openChannelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lnrpc.openChannelRequest;
  return proto.lnrpc.openChannelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lnrpc.openChannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lnrpc.openChannelRequest}
 */
proto.lnrpc.openChannelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNodePubkey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodePubkeyString(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLocalFundingAmount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPushSat(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTargetConf(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSatPerByte(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPrivate(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinHtlcMsat(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRemoteCsvDelay(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinConf(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSpendUnconfirmed(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setCloseAddress(value);
      break;
    case 13:
      var value = new proto.lnrpc.FundingShim;
      reader.readMessage(value,proto.lnrpc.FundingShim.deserializeBinaryFromReader);
      msg.setFundingShim(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lnrpc.openChannelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lnrpc.openChannelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lnrpc.openChannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.openChannelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodePubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getNodePubkeyString();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLocalFundingAmount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getPushSat();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getTargetConf();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getSatPerByte();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getPrivate();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getMinHtlcMsat();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getRemoteCsvDelay();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getMinConf();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getSpendUnconfirmed();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getCloseAddress();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getFundingShim();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.lnrpc.FundingShim.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes node_pubkey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.lnrpc.openChannelRequest.prototype.getNodePubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes node_pubkey = 1;
 * This is a type-conversion wrapper around `getNodePubkey()`
 * @return {string}
 */
proto.lnrpc.openChannelRequest.prototype.getNodePubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNodePubkey()));
};


/**
 * optional bytes node_pubkey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodePubkey()`
 * @return {!Uint8Array}
 */
proto.lnrpc.openChannelRequest.prototype.getNodePubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNodePubkey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lnrpc.openChannelRequest} returns this
 */
proto.lnrpc.openChannelRequest.prototype.setNodePubkey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string node_pubkey_string = 2;
 * @return {string}
 */
proto.lnrpc.openChannelRequest.prototype.getNodePubkeyString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.lnrpc.openChannelRequest} returns this
 */
proto.lnrpc.openChannelRequest.prototype.setNodePubkeyString = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 local_funding_amount = 3;
 * @return {number}
 */
proto.lnrpc.openChannelRequest.prototype.getLocalFundingAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.lnrpc.openChannelRequest} returns this
 */
proto.lnrpc.openChannelRequest.prototype.setLocalFundingAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 push_sat = 4;
 * @return {number}
 */
proto.lnrpc.openChannelRequest.prototype.getPushSat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.lnrpc.openChannelRequest} returns this
 */
proto.lnrpc.openChannelRequest.prototype.setPushSat = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 target_conf = 5;
 * @return {number}
 */
proto.lnrpc.openChannelRequest.prototype.getTargetConf = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.lnrpc.openChannelRequest} returns this
 */
proto.lnrpc.openChannelRequest.prototype.setTargetConf = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 sat_per_byte = 6;
 * @return {number}
 */
proto.lnrpc.openChannelRequest.prototype.getSatPerByte = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.lnrpc.openChannelRequest} returns this
 */
proto.lnrpc.openChannelRequest.prototype.setSatPerByte = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool private = 7;
 * @return {boolean}
 */
proto.lnrpc.openChannelRequest.prototype.getPrivate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lnrpc.openChannelRequest} returns this
 */
proto.lnrpc.openChannelRequest.prototype.setPrivate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional int64 min_htlc_msat = 8;
 * @return {number}
 */
proto.lnrpc.openChannelRequest.prototype.getMinHtlcMsat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.lnrpc.openChannelRequest} returns this
 */
proto.lnrpc.openChannelRequest.prototype.setMinHtlcMsat = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 remote_csv_delay = 9;
 * @return {number}
 */
proto.lnrpc.openChannelRequest.prototype.getRemoteCsvDelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.lnrpc.openChannelRequest} returns this
 */
proto.lnrpc.openChannelRequest.prototype.setRemoteCsvDelay = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 min_conf = 10;
 * @return {number}
 */
proto.lnrpc.openChannelRequest.prototype.getMinConf = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.lnrpc.openChannelRequest} returns this
 */
proto.lnrpc.openChannelRequest.prototype.setMinConf = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bool spend_unconfirmed = 11;
 * @return {boolean}
 */
proto.lnrpc.openChannelRequest.prototype.getSpendUnconfirmed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lnrpc.openChannelRequest} returns this
 */
proto.lnrpc.openChannelRequest.prototype.setSpendUnconfirmed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional string close_address = 12;
 * @return {string}
 */
proto.lnrpc.openChannelRequest.prototype.getCloseAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.lnrpc.openChannelRequest} returns this
 */
proto.lnrpc.openChannelRequest.prototype.setCloseAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional FundingShim funding_shim = 13;
 * @return {?proto.lnrpc.FundingShim}
 */
proto.lnrpc.openChannelRequest.prototype.getFundingShim = function() {
  return /** @type{?proto.lnrpc.FundingShim} */ (
    jspb.Message.getWrapperField(this, proto.lnrpc.FundingShim, 13));
};


/**
 * @param {?proto.lnrpc.FundingShim|undefined} value
 * @return {!proto.lnrpc.openChannelRequest} returns this
*/
proto.lnrpc.openChannelRequest.prototype.setFundingShim = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lnrpc.openChannelRequest} returns this
 */
proto.lnrpc.openChannelRequest.prototype.clearFundingShim = function() {
  return this.setFundingShim(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lnrpc.openChannelRequest.prototype.hasFundingShim = function() {
  return jspb.Message.getField(this, 13) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lnrpc.openChannelResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.lnrpc.openChannelResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lnrpc.openChannelResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.openChannelResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lnrpc.openChannelResponse}
 */
proto.lnrpc.openChannelResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lnrpc.openChannelResponse;
  return proto.lnrpc.openChannelResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lnrpc.openChannelResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lnrpc.openChannelResponse}
 */
proto.lnrpc.openChannelResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lnrpc.openChannelResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lnrpc.openChannelResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lnrpc.openChannelResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.openChannelResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lnrpc.FundingShim.prototype.toObject = function(opt_includeInstance) {
  return proto.lnrpc.FundingShim.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lnrpc.FundingShim} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.FundingShim.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lnrpc.FundingShim}
 */
proto.lnrpc.FundingShim.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lnrpc.FundingShim;
  return proto.lnrpc.FundingShim.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lnrpc.FundingShim} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lnrpc.FundingShim}
 */
proto.lnrpc.FundingShim.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lnrpc.FundingShim.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lnrpc.FundingShim.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lnrpc.FundingShim} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.FundingShim.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lnrpc.Channel.prototype.toObject = function(opt_includeInstance) {
  return proto.lnrpc.Channel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lnrpc.Channel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.Channel.toObject = function(includeInstance, msg) {
  var f, obj = {
    active: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    remotePubkey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    channelPubkey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    channelPoint: jspb.Message.getFieldWithDefault(msg, 4, ""),
    chanId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    capacity: jspb.Message.getFieldWithDefault(msg, 6, ""),
    localBalance: jspb.Message.getFieldWithDefault(msg, 7, ""),
    remoteBalance: jspb.Message.getFieldWithDefault(msg, 8, ""),
    commitFee: jspb.Message.getFieldWithDefault(msg, 9, ""),
    commitWeight: jspb.Message.getFieldWithDefault(msg, 10, ""),
    feePerKw: jspb.Message.getFieldWithDefault(msg, 11, ""),
    unsettledBalance: jspb.Message.getFieldWithDefault(msg, 12, ""),
    totalSatoshisSent: jspb.Message.getFieldWithDefault(msg, 13, ""),
    totalSatoshisReceived: jspb.Message.getFieldWithDefault(msg, 14, ""),
    numUpdates: jspb.Message.getFieldWithDefault(msg, 15, ""),
    pendingHtlcs: (f = msg.getPendingHtlcs()) && proto.lnrpc.Htlc.toObject(includeInstance, f),
    csvDelay: jspb.Message.getFieldWithDefault(msg, 17, 0),
    pb_private: jspb.Message.getBooleanFieldWithDefault(msg, 18, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lnrpc.Channel}
 */
proto.lnrpc.Channel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lnrpc.Channel;
  return proto.lnrpc.Channel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lnrpc.Channel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lnrpc.Channel}
 */
proto.lnrpc.Channel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemotePubkey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelPubkey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelPoint(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setChanId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCapacity(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalBalance(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteBalance(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommitFee(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommitWeight(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeePerKw(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnsettledBalance(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalSatoshisSent(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalSatoshisReceived(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setNumUpdates(value);
      break;
    case 16:
      var value = new proto.lnrpc.Htlc;
      reader.readMessage(value,proto.lnrpc.Htlc.deserializeBinaryFromReader);
      msg.setPendingHtlcs(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCsvDelay(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPrivate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lnrpc.Channel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lnrpc.Channel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lnrpc.Channel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.Channel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActive();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getRemotePubkey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChannelPubkey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getChannelPoint();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getChanId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCapacity();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getLocalBalance();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getRemoteBalance();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCommitFee();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCommitWeight();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getFeePerKw();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getUnsettledBalance();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getTotalSatoshisSent();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getTotalSatoshisReceived();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getNumUpdates();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getPendingHtlcs();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.lnrpc.Htlc.serializeBinaryToWriter
    );
  }
  f = message.getCsvDelay();
  if (f !== 0) {
    writer.writeUint32(
      17,
      f
    );
  }
  f = message.getPrivate();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
};


/**
 * optional bool active = 1;
 * @return {boolean}
 */
proto.lnrpc.Channel.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lnrpc.Channel} returns this
 */
proto.lnrpc.Channel.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string remote_pubkey = 2;
 * @return {string}
 */
proto.lnrpc.Channel.prototype.getRemotePubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.lnrpc.Channel} returns this
 */
proto.lnrpc.Channel.prototype.setRemotePubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string channel_pubkey = 3;
 * @return {string}
 */
proto.lnrpc.Channel.prototype.getChannelPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.lnrpc.Channel} returns this
 */
proto.lnrpc.Channel.prototype.setChannelPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string channel_point = 4;
 * @return {string}
 */
proto.lnrpc.Channel.prototype.getChannelPoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.lnrpc.Channel} returns this
 */
proto.lnrpc.Channel.prototype.setChannelPoint = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string chan_id = 5;
 * @return {string}
 */
proto.lnrpc.Channel.prototype.getChanId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.lnrpc.Channel} returns this
 */
proto.lnrpc.Channel.prototype.setChanId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string capacity = 6;
 * @return {string}
 */
proto.lnrpc.Channel.prototype.getCapacity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.lnrpc.Channel} returns this
 */
proto.lnrpc.Channel.prototype.setCapacity = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string local_balance = 7;
 * @return {string}
 */
proto.lnrpc.Channel.prototype.getLocalBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.lnrpc.Channel} returns this
 */
proto.lnrpc.Channel.prototype.setLocalBalance = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string remote_balance = 8;
 * @return {string}
 */
proto.lnrpc.Channel.prototype.getRemoteBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.lnrpc.Channel} returns this
 */
proto.lnrpc.Channel.prototype.setRemoteBalance = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string commit_fee = 9;
 * @return {string}
 */
proto.lnrpc.Channel.prototype.getCommitFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.lnrpc.Channel} returns this
 */
proto.lnrpc.Channel.prototype.setCommitFee = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string commit_weight = 10;
 * @return {string}
 */
proto.lnrpc.Channel.prototype.getCommitWeight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.lnrpc.Channel} returns this
 */
proto.lnrpc.Channel.prototype.setCommitWeight = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string fee_per_kw = 11;
 * @return {string}
 */
proto.lnrpc.Channel.prototype.getFeePerKw = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.lnrpc.Channel} returns this
 */
proto.lnrpc.Channel.prototype.setFeePerKw = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string unsettled_balance = 12;
 * @return {string}
 */
proto.lnrpc.Channel.prototype.getUnsettledBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.lnrpc.Channel} returns this
 */
proto.lnrpc.Channel.prototype.setUnsettledBalance = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string total_satoshis_sent = 13;
 * @return {string}
 */
proto.lnrpc.Channel.prototype.getTotalSatoshisSent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.lnrpc.Channel} returns this
 */
proto.lnrpc.Channel.prototype.setTotalSatoshisSent = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string total_satoshis_received = 14;
 * @return {string}
 */
proto.lnrpc.Channel.prototype.getTotalSatoshisReceived = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.lnrpc.Channel} returns this
 */
proto.lnrpc.Channel.prototype.setTotalSatoshisReceived = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string num_updates = 15;
 * @return {string}
 */
proto.lnrpc.Channel.prototype.getNumUpdates = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.lnrpc.Channel} returns this
 */
proto.lnrpc.Channel.prototype.setNumUpdates = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional Htlc pending_htlcs = 16;
 * @return {?proto.lnrpc.Htlc}
 */
proto.lnrpc.Channel.prototype.getPendingHtlcs = function() {
  return /** @type{?proto.lnrpc.Htlc} */ (
    jspb.Message.getWrapperField(this, proto.lnrpc.Htlc, 16));
};


/**
 * @param {?proto.lnrpc.Htlc|undefined} value
 * @return {!proto.lnrpc.Channel} returns this
*/
proto.lnrpc.Channel.prototype.setPendingHtlcs = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lnrpc.Channel} returns this
 */
proto.lnrpc.Channel.prototype.clearPendingHtlcs = function() {
  return this.setPendingHtlcs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lnrpc.Channel.prototype.hasPendingHtlcs = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional uint32 csv_delay = 17;
 * @return {number}
 */
proto.lnrpc.Channel.prototype.getCsvDelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.lnrpc.Channel} returns this
 */
proto.lnrpc.Channel.prototype.setCsvDelay = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional bool private = 18;
 * @return {boolean}
 */
proto.lnrpc.Channel.prototype.getPrivate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 18, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lnrpc.Channel} returns this
 */
proto.lnrpc.Channel.prototype.setPrivate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 18, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lnrpc.Htlc.prototype.toObject = function(opt_includeInstance) {
  return proto.lnrpc.Htlc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lnrpc.Htlc} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.Htlc.toObject = function(includeInstance, msg) {
  var f, obj = {
    incoming: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    amount: jspb.Message.getFieldWithDefault(msg, 2, ""),
    hashLock: jspb.Message.getFieldWithDefault(msg, 3, ""),
    expirationHeight: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lnrpc.Htlc}
 */
proto.lnrpc.Htlc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lnrpc.Htlc;
  return proto.lnrpc.Htlc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lnrpc.Htlc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lnrpc.Htlc}
 */
proto.lnrpc.Htlc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncoming(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHashLock(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExpirationHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lnrpc.Htlc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lnrpc.Htlc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lnrpc.Htlc} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.Htlc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIncoming();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHashLock();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getExpirationHeight();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional bool incoming = 1;
 * @return {boolean}
 */
proto.lnrpc.Htlc.prototype.getIncoming = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lnrpc.Htlc} returns this
 */
proto.lnrpc.Htlc.prototype.setIncoming = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string amount = 2;
 * @return {string}
 */
proto.lnrpc.Htlc.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.lnrpc.Htlc} returns this
 */
proto.lnrpc.Htlc.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string hash_lock = 3;
 * @return {string}
 */
proto.lnrpc.Htlc.prototype.getHashLock = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.lnrpc.Htlc} returns this
 */
proto.lnrpc.Htlc.prototype.setHashLock = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 expiration_height = 4;
 * @return {number}
 */
proto.lnrpc.Htlc.prototype.getExpirationHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.lnrpc.Htlc} returns this
 */
proto.lnrpc.Htlc.prototype.setExpirationHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


goog.object.extend(exports, proto.lnrpc);
