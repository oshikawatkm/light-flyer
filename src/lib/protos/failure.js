// source: rpc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.lnrpc.Failure');
goog.provide('proto.lnrpc.Failure.FailureCode');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.lnrpc.ChannelUpdate');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lnrpc.Failure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lnrpc.Failure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lnrpc.Failure.displayName = 'proto.lnrpc.Failure';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lnrpc.Failure.prototype.toObject = function(opt_includeInstance) {
  return proto.lnrpc.Failure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lnrpc.Failure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.Failure.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    channelUpdate: (f = msg.getChannelUpdate()) && proto.lnrpc.ChannelUpdate.toObject(includeInstance, f),
    htlcMsat: jspb.Message.getFieldWithDefault(msg, 4, 0),
    onionSha256: msg.getOnionSha256_asB64(),
    cltvExpiry: jspb.Message.getFieldWithDefault(msg, 6, 0),
    flags: jspb.Message.getFieldWithDefault(msg, 7, 0),
    failureSourceIndex: jspb.Message.getFieldWithDefault(msg, 8, 0),
    height: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lnrpc.Failure}
 */
proto.lnrpc.Failure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lnrpc.Failure;
  return proto.lnrpc.Failure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lnrpc.Failure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lnrpc.Failure}
 */
proto.lnrpc.Failure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lnrpc.Failure.FailureCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 3:
      var value = new proto.lnrpc.ChannelUpdate;
      reader.readMessage(value,proto.lnrpc.ChannelUpdate.deserializeBinaryFromReader);
      msg.setChannelUpdate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHtlcMsat(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOnionSha256(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCltvExpiry(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlags(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFailureSourceIndex(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lnrpc.Failure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lnrpc.Failure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lnrpc.Failure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.Failure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getChannelUpdate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lnrpc.ChannelUpdate.serializeBinaryToWriter
    );
  }
  f = message.getHtlcMsat();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getOnionSha256_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getCltvExpiry();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getFailureSourceIndex();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.lnrpc.Failure.FailureCode = {
  RESERVED: 0,
  INCORRECT_OR_UNKNOWN_PAYMENT_DETAILS: 1,
  INCORRECT_PAYMENT_AMOUNT: 2,
  FINAL_INCORRECT_CLTV_EXPIRY: 3,
  FINAL_INCORRECT_HTLC_AMOUNT: 4,
  FINAL_EXPIRY_TOO_SOON: 5,
  INVALID_REALM: 6,
  EXPIRY_TOO_SOON: 7,
  INVALID_ONION_VERSION: 8,
  INVALID_ONION_HMAC: 9,
  INVALID_ONION_KEY: 10,
  AMOUNT_BELOW_MINIMUM: 11,
  FEE_INSUFFICIENT: 12,
  INCORRECT_CLTV_EXPIRY: 13,
  CHANNEL_DISABLED: 14,
  TEMPORARY_CHANNEL_FAILURE: 15,
  REQUIRED_NODE_FEATURE_MISSING: 16,
  REQUIRED_CHANNEL_FEATURE_MISSING: 17,
  UNKNOWN_NEXT_PEER: 18,
  TEMPORARY_NODE_FAILURE: 19,
  PERMANENT_NODE_FAILURE: 20,
  PERMANENT_CHANNEL_FAILURE: 21,
  EXPIRY_TOO_FAR: 22,
  MPP_TIMEOUT: 23,
  INTERNAL_FAILURE: 997,
  UNKNOWN_FAILURE: 998,
  UNREADABLE_FAILURE: 999
};

/**
 * optional FailureCode code = 1;
 * @return {!proto.lnrpc.Failure.FailureCode}
 */
proto.lnrpc.Failure.prototype.getCode = function() {
  return /** @type {!proto.lnrpc.Failure.FailureCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lnrpc.Failure.FailureCode} value
 * @return {!proto.lnrpc.Failure} returns this
 */
proto.lnrpc.Failure.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ChannelUpdate channel_update = 3;
 * @return {?proto.lnrpc.ChannelUpdate}
 */
proto.lnrpc.Failure.prototype.getChannelUpdate = function() {
  return /** @type{?proto.lnrpc.ChannelUpdate} */ (
    jspb.Message.getWrapperField(this, proto.lnrpc.ChannelUpdate, 3));
};


/**
 * @param {?proto.lnrpc.ChannelUpdate|undefined} value
 * @return {!proto.lnrpc.Failure} returns this
*/
proto.lnrpc.Failure.prototype.setChannelUpdate = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lnrpc.Failure} returns this
 */
proto.lnrpc.Failure.prototype.clearChannelUpdate = function() {
  return this.setChannelUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lnrpc.Failure.prototype.hasChannelUpdate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 htlc_msat = 4;
 * @return {number}
 */
proto.lnrpc.Failure.prototype.getHtlcMsat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.lnrpc.Failure} returns this
 */
proto.lnrpc.Failure.prototype.setHtlcMsat = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes onion_sha_256 = 5;
 * @return {string}
 */
proto.lnrpc.Failure.prototype.getOnionSha256 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes onion_sha_256 = 5;
 * This is a type-conversion wrapper around `getOnionSha256()`
 * @return {string}
 */
proto.lnrpc.Failure.prototype.getOnionSha256_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOnionSha256()));
};


/**
 * optional bytes onion_sha_256 = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOnionSha256()`
 * @return {!Uint8Array}
 */
proto.lnrpc.Failure.prototype.getOnionSha256_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOnionSha256()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lnrpc.Failure} returns this
 */
proto.lnrpc.Failure.prototype.setOnionSha256 = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional uint32 cltv_expiry = 6;
 * @return {number}
 */
proto.lnrpc.Failure.prototype.getCltvExpiry = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.lnrpc.Failure} returns this
 */
proto.lnrpc.Failure.prototype.setCltvExpiry = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 flags = 7;
 * @return {number}
 */
proto.lnrpc.Failure.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.lnrpc.Failure} returns this
 */
proto.lnrpc.Failure.prototype.setFlags = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 failure_source_index = 8;
 * @return {number}
 */
proto.lnrpc.Failure.prototype.getFailureSourceIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.lnrpc.Failure} returns this
 */
proto.lnrpc.Failure.prototype.setFailureSourceIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 height = 9;
 * @return {number}
 */
proto.lnrpc.Failure.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.lnrpc.Failure} returns this
 */
proto.lnrpc.Failure.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


